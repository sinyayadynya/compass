<?php

use Drupal\Core\Theme\ThemeManagerInterface;

/**
 * @file
 * Functions to support theming.
 */

/**
 * Implements hook_preprocess_image_widget().
 */
function compass_preprocess_image_widget(array &$variables) {
  $data = &$variables['data'];

  // This prevents image widget templates from rendering preview container HTML
  // to users that do not have permission to access these previews.
  // @todo revisit in https://drupal.org/node/953034
  // @todo revisit in https://drupal.org/node/3114318
  if (isset($data['preview']['#access']) && $data['preview']['#access'] === FALSE) {
    unset($data['preview']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for html templates.
 */
function compass_preprocess_html(&$variables) {
    if (\Drupal::routeMatch()->getRouteName() === 'entity.node.canonical') {
      $node = \Drupal::routeMatch()->getParameter('node');
      if ($node instanceof \Drupal\node\NodeInterface) {
        $variables['theme_hook_suggestions'][] = 'html__node__' . str_replace('_', '-', $node->bundle());
      }
    }
  }

  /**
 * Implements hook_theme_suggestions_html_alter().
 */
function compass_theme_suggestions_html_alter(array &$suggestions, array $variables) {
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
      $suggestions[] = 'html__' . $node->bundle();
    }
  }

/**
 * Implements hook_theme_suggestions_page_alter().
 */
function compass_theme_suggestions_page_alter(array &$suggestions, array $variables) {
    if ($node = \Drupal::routeMatch()->getParameter('node')) {
      $suggestions[] = 'page__' . $node->bundle();
    }
  }

/**
 * Implements hook_preprocess_HOOK() for paragraph templates.
 */
function compass_preprocess_paragraph__user_review(&$variables) {
    // Load the paragraph entity.
    $paragraph = $variables['paragraph'];

    // Check if the paragraph has the 'schema_author' field.
    if ($paragraph->hasField('schema_author') && !$paragraph->get('schema_author')->isEmpty()) {
      // Load the referenced entity, even if unpublished.
      $author_id = $paragraph->get('schema_author')->target_id;
      $author = \Drupal::entityTypeManager()->getStorage('node')->loadUnchanged($author_id);

      // Pass the author entity and its fields to the template.
      if ($author) {
        $variables['schema_author'] = $author;
        $variables['schema_author_label'] = $author->label();

        // Load the media image entity.
        $schema_image_media = $author->get('schema_image')->entity;
        if ($schema_image_media) {
          $schema_image_file = $schema_image_media->get('field_media_image')->entity;
          $variables['schema_author_image_uri'] = $schema_image_file ? $schema_image_file->getFileUri() : NULL;
        }

        $variables['schema_author_occupation'] = $author->get('schema_job_title')->value;
      }
    }
  }

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function compass_theme_suggestions_HOOK_alter(array &$suggestions, array $variables) {
    // Generate logo list during the theme initialization.
    compass_generate_logo_list();
}

/**
 * Generate a list of SVG logos and save it to a JSON file.
 */
function compass_generate_logo_list() {
    $theme = \Drupal::theme()->getActiveTheme()->getName();
    $directory = \Drupal::service('extension.list.theme')->getPath($theme) . '/components/tailwindui/marketing/sections/logo-clouds/logo-cloud-simple/images';
    $json_file = \Drupal::service('extension.list.theme')->getPath($theme) . '/components/tailwindui/marketing/sections/logo-clouds/logo-cloud-simple/logo-cloud-simple.json';

    if (!file_exists($json_file)) {
        $logos = glob($directory . '/*.svg');
        $logos_data = [];

        foreach ($logos as $logo) {
        $file_name = pathinfo($logo, PATHINFO_FILENAME);
        // Extract company name by removing common words and characters
        $company_name = preg_replace('/(logo-|gray-|900)/', '', $file_name);
        $company_name = ucwords(str_replace('-', ' ', $company_name));

        $logos_data[] = [
            'path' => $logo,
            'name' => $company_name
        ];
        }

        file_put_contents($json_file, json_encode($logos_data));
    }
}
